// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseAPI.Infrastructure.Data;

#nullable disable

namespace WarehouseAPI.Migrations
{
    [DbContext(typeof(WarehousesDbContext))]
    [Migration("20250215074511_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UniversalProductCode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.ProductDiscountPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDiscount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalPriceWithDiscount")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OrginalPrice")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDiscount")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDiscountPrices");
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateDatetime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FinalPrice")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PercentageProfitPrice")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemainingQuantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.Product", b =>
                {
                    b.OwnsOne("WarehouseAPI.Domain.ProductAggregate.CompanyInformation", "CompanyInformation", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CompanyAddress")
                                .HasColumnType("TEXT")
                                .HasColumnName("CompanyAddress");

                            b1.Property<string>("CompanyEmail")
                                .HasColumnType("TEXT")
                                .HasColumnName("CompanyEmail");

                            b1.Property<string>("CompanyName")
                                .HasColumnType("TEXT")
                                .HasColumnName("CompanyName");

                            b1.Property<string>("CompanyPhone")
                                .HasColumnType("TEXT")
                                .HasColumnName("CompanyPhone");

                            b1.Property<string>("MadeCountry")
                                .HasColumnType("TEXT")
                                .HasColumnName("MadeCountry");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("CompanyInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.ProductDiscountPrice", b =>
                {
                    b.HasOne("WarehouseAPI.Domain.ProductAggregate.Product", "Product")
                        .WithMany("ProductDiscountPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.ProductPrice", b =>
                {
                    b.HasOne("WarehouseAPI.Domain.ProductAggregate.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseAPI.Domain.ProductAggregate.Product", b =>
                {
                    b.Navigation("ProductDiscountPrices");

                    b.Navigation("ProductPrices");
                });
#pragma warning restore 612, 618
        }
    }
}
